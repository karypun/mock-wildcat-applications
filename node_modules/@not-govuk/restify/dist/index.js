"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.restify = exports.createServer = void 0;
const restify_1 = __importDefault(require("restify"));
const restify_bunyan_logger_1 = __importDefault(require("restify-bunyan-logger"));
const stoppable_1 = __importDefault(require("stoppable"));
const health_check_1 = require("./middleware/health-check");
const html_by_default_1 = require("./middleware/html-by-default");
const prevent_clickjacking_1 = require("./middleware/prevent-clickjacking");
const no_cache_by_default_1 = require("./middleware/no-cache-by-default");
const logger_1 = require("./lib/logger");
const serve_api_1 = require("./lib/serve-api");
const originalCreateServer = restify_1.default.createServer.bind(restify_1.default);
exports.createServer = (options) => {
    if (options.name) {
        process.title = options.name.replace(/[^\w]/gi, '').substr(0, 6);
    }
    const name = options.name || 'restify';
    const log = options.log || logger_1.logger({ name, ...options.logger });
    const grace = options.grace || 25000;
    const formatBinary = exports.restify.formatters['application/octet-stream; q=0.2'];
    const formatText = exports.restify.formatters['text/plain; q=0.3'];
    const acceptable = [
        'application/json',
        'application/octet-stream',
        'application/xhtml+xml',
        'text/event-stream',
        'text/plain',
        'text/html'
    ];
    const httpd = originalCreateServer({
        ...options,
        formatters: {
            'application/graphql; q=0.2': formatText,
            'application/gzip; q=0.2': formatBinary,
            'application/pdf; q=0.2': formatBinary,
            'application/xhtml+xml; q=0.2': formatText,
            'application/zip; q=0.2': formatBinary,
            'font/otf; q=0.1': formatBinary,
            'font/ttf; q=0.1': formatBinary,
            'font/woff; q=0.1': formatBinary,
            'font/woff2; q=0.1': formatBinary,
            'image/gif; q=0.2': formatBinary,
            'image/jpeg; q=0.2': formatBinary,
            'image/png; q=0.2': formatBinary,
            'image/svg+xml; q=0.2': formatText,
            'image/x-icon; q=0.1': formatBinary,
            'text/css; q=0.1': formatText,
            'text/event-stream; q=0.1': formatText,
            'text/html; q=0.2': formatText,
            'text/javascript; q=0.1': formatText,
            ...options.formatters
        },
        log
    });
    httpd.log = log;
    serve_api_1.installServeAPI(httpd);
    stoppable_1.default(httpd, grace);
    httpd.pre(exports.restify.plugins.pre.sanitizePath());
    httpd.pre(html_by_default_1.htmlByDefault(httpd));
    httpd.use(exports.restify.plugins.acceptParser(httpd.acceptable.filter(v => acceptable.includes(v))));
    (options.bodyParser !== false) && httpd.use(exports.restify.plugins.bodyParser(Object.assign({ mapParams: false }, options.bodyParser)));
    httpd.use(exports.restify.plugins.queryParser(Object.assign({ mapParams: false }, options.queryParser)));
    httpd.use(exports.restify.plugins.requestLogger(options.requestLogger));
    httpd.use(exports.restify.plugins.fullResponse());
    if (process.env['NODE_ENV'] !== 'development') {
        httpd.use(exports.restify.plugins.gzipResponse());
    }
    httpd.on('after', restify_bunyan_logger_1.default());
    httpd.use(prevent_clickjacking_1.preventClickjacking);
    httpd.use(no_cache_by_default_1.noCacheByDefault);
    httpd.get(options.liveness || '/healthz', health_check_1.liveness);
    return httpd;
};
exports.restify = {
    ...restify_1.default,
    createServer: exports.createServer
};
exports.default = exports.restify;
exports.errors = __importStar(require("restify-errors"));
var router_1 = require("./lib/router");
Object.defineProperty(exports, "Router", { enumerable: true, get: function () { return router_1.Router; } });
