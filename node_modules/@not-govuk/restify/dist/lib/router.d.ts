import { Server as RestifyServer, RequestHandlerType, RouteOptions } from 'restify';
declare enum Method {
    Delete = 0,
    Get = 1,
    Head = 2,
    Options = 3,
    Patch = 4,
    Post = 5,
    Put = 6
}
export declare class Router {
    private routes;
    protected add(opts: string | RegExp | RouteOptions, handlers: RequestHandlerType[], method: Method): void;
    del(opts: string | RegExp | RouteOptions, ...handlers: RequestHandlerType[]): void;
    get(opts: string | RegExp | RouteOptions, ...handlers: RequestHandlerType[]): void;
    head(opts: string | RegExp | RouteOptions, ...handlers: RequestHandlerType[]): void;
    opts(opts: string | RegExp | RouteOptions, ...handlers: RequestHandlerType[]): void;
    patch(opts: string | RegExp | RouteOptions, ...handlers: RequestHandlerType[]): void;
    post(opts: string | RegExp | RouteOptions, ...handlers: RequestHandlerType[]): void;
    put(opts: string | RegExp | RouteOptions, ...handlers: RequestHandlerType[]): void;
    apply(httpd: RestifyServer, path: string): void;
}
export declare type Server = RestifyServer & {
    serve?: (path: string, router: Router) => void;
};
export declare const installServe: (httpd: Server) => void;
export default Router;
