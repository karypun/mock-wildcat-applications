"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.installServe = exports.Router = void 0;
var Method;
(function (Method) {
    Method[Method["Delete"] = 0] = "Delete";
    Method[Method["Get"] = 1] = "Get";
    Method[Method["Head"] = 2] = "Head";
    Method[Method["Options"] = 3] = "Options";
    Method[Method["Patch"] = 4] = "Patch";
    Method[Method["Post"] = 5] = "Post";
    Method[Method["Put"] = 6] = "Put";
})(Method || (Method = {}));
;
;
const removeTrailingSlash = (s) => (s.endsWith('/')
    ? s.slice(0, -1)
    : s);
const addPreceedingSlash = (s) => (s.startsWith('/')
    ? s
    : '/' + s);
const sanitisePath = (s) => (addPreceedingSlash(removeTrailingSlash(s)));
class Router {
    constructor() {
        this.routes = [];
    }
    add(opts, handlers, method) {
        this.routes.push({
            handlers,
            method,
            opts
        });
    }
    del(opts, ...handlers) {
        this.add(opts, handlers, Method.Delete);
    }
    get(opts, ...handlers) {
        this.add(opts, handlers, Method.Get);
    }
    head(opts, ...handlers) {
        this.add(opts, handlers, Method.Head);
    }
    opts(opts, ...handlers) {
        this.add(opts, handlers, Method.Options);
    }
    patch(opts, ...handlers) {
        this.add(opts, handlers, Method.Patch);
    }
    post(opts, ...handlers) {
        this.add(opts, handlers, Method.Post);
    }
    put(opts, ...handlers) {
        this.add(opts, handlers, Method.Put);
    }
    apply(httpd, path) {
        path = removeTrailingSlash(path);
        this.routes.forEach(v => {
            const opts = (typeof v.opts === 'string'
                ? sanitisePath(path + v.opts)
                : (v.opts instanceof RegExp
                    ? new RegExp(path + v.opts.source)
                    : {
                        ...v.opts,
                        path: sanitisePath(path + v.opts.path)
                    }));
            switch (v.method) {
                case Method.Delete:
                    httpd.del(opts, ...v.handlers);
                    break;
                case Method.Get:
                    httpd.get(opts, ...v.handlers);
                    break;
                case Method.Head:
                    httpd.head(opts, ...v.handlers);
                    break;
                case Method.Options:
                    httpd.opts(opts, ...v.handlers);
                    break;
                case Method.Patch:
                    httpd.patch(opts, ...v.handlers);
                    break;
                case Method.Post:
                    httpd.post(opts, ...v.handlers);
                    break;
                case Method.Put:
                    httpd.put(opts, ...v.handlers);
                    break;
            }
        });
    }
}
exports.Router = Router;
;
function serve(path, router) {
    router.apply(this, path);
}
exports.installServe = (httpd) => {
    httpd.serve = serve;
};
exports.default = Router;
