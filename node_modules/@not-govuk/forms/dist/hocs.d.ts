import { ComponentType, FC } from 'react';
import { FormatFn } from './graph';
import { ReadyValidator } from './validators';
declare type MyFieldProps = {
    name: string;
    prettyName?: string;
    validators?: any[];
};
declare type MyControlProps = {
    disabled?: boolean;
};
export declare type RawField<A> = ComponentType<A> & {
    format?: FormatFn;
};
interface IPreValidators {
    [k: string]: ReadyValidator[];
}
export declare const withField: <A>(Component: RawField<A>, implicitValidators?: ReadyValidator[], preValidators?: IPreValidators) => FC<A & MyFieldProps & MyControlProps>;
export declare const withControl: <A extends MyControlProps>(Component: ComponentType<A>) => FC<A>;
export declare const withForm: <A>(Component: RawField<A>, implicitValidators?: ReadyValidator[], preValidators?: IPreValidators) => FC<A & MyFieldProps & MyControlProps>;
export {};
