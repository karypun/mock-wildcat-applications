"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Form = void 0;
const react_1 = require("react");
const server_1 = require("react-dom/server");
const react_router_1 = require("react-router");
const react_router_dom_1 = require("react-router-dom");
const es6_1 = __importDefault(require("fast-deep-equal/es6"));
const component_helpers_1 = require("@not-govuk/component-helpers");
const route_utils_1 = require("@not-govuk/route-utils");
const formik_form_1 = __importDefault(require("./formik-form"));
const graph_1 = require("./graph");
const completion_1 = require("./completion");
const registry_1 = require("./registry");
var hocs_1 = require("./hocs");
Object.defineProperty(exports, "withField", { enumerable: true, get: function () { return hocs_1.withField; } });
Object.defineProperty(exports, "withForm", { enumerable: true, get: function () { return hocs_1.withForm; } });
Object.defineProperty(exports, "withControl", { enumerable: true, get: function () { return hocs_1.withControl; } });
var page_1 = require("./page");
Object.defineProperty(exports, "Page", { enumerable: true, get: function () { return page_1.Page; } });
var fork_1 = require("./fork");
Object.defineProperty(exports, "Fork", { enumerable: true, get: function () { return fork_1.Fork; } });
var validators_1 = require("./validators");
Object.defineProperty(exports, "after", { enumerable: true, get: function () { return validators_1.after; } });
Object.defineProperty(exports, "alpha", { enumerable: true, get: function () { return validators_1.alpha; } });
Object.defineProperty(exports, "alphanumeric", { enumerable: true, get: function () { return validators_1.alphanumeric; } });
Object.defineProperty(exports, "before", { enumerable: true, get: function () { return validators_1.before; } });
Object.defineProperty(exports, "date", { enumerable: true, get: function () { return validators_1.date; } });
Object.defineProperty(exports, "email", { enumerable: true, get: function () { return validators_1.email; } });
Object.defineProperty(exports, "exactLength", { enumerable: true, get: function () { return validators_1.exactLength; } });
Object.defineProperty(exports, "future", { enumerable: true, get: function () { return validators_1.future; } });
Object.defineProperty(exports, "integer", { enumerable: true, get: function () { return validators_1.integer; } });
Object.defineProperty(exports, "maximum", { enumerable: true, get: function () { return validators_1.maximum; } });
Object.defineProperty(exports, "maxLength", { enumerable: true, get: function () { return validators_1.maxLength; } });
Object.defineProperty(exports, "maxWords", { enumerable: true, get: function () { return validators_1.maxWords; } });
Object.defineProperty(exports, "minimum", { enumerable: true, get: function () { return validators_1.minimum; } });
Object.defineProperty(exports, "minLength", { enumerable: true, get: function () { return validators_1.minLength; } });
Object.defineProperty(exports, "minWords", { enumerable: true, get: function () { return validators_1.minWords; } });
Object.defineProperty(exports, "mobileNumber", { enumerable: true, get: function () { return validators_1.mobileNumber; } });
Object.defineProperty(exports, "numeric", { enumerable: true, get: function () { return validators_1.numeric; } });
Object.defineProperty(exports, "past", { enumerable: true, get: function () { return validators_1.past; } });
Object.defineProperty(exports, "postalCode", { enumerable: true, get: function () { return validators_1.postalCode; } });
Object.defineProperty(exports, "range", { enumerable: true, get: function () { return validators_1.range; } });
Object.defineProperty(exports, "required", { enumerable: true, get: function () { return validators_1.required; } });
Object.defineProperty(exports, "url", { enumerable: true, get: function () { return validators_1.url; } });
Object.defineProperty(exports, "validator", { enumerable: true, get: function () { return validators_1.validator; } });
exports.Form = ({ action: _action, children, classBlock, classModifiers, className, initialValues: _initialValues, method, validate: _validate, ...attrs }) => {
    const classes = component_helpers_1.classBuilder('penultimate-form', classBlock, classModifiers, className);
    const history = react_router_dom_1.useHistory();
    const location = route_utils_1.useLocation();
    const submittedValues = (method === 'get'
        ? location.query
        : location.state) || {};
    const initialErrors = {};
    const initialTouched = Object.keys(submittedValues).reduce((acc, cur) => ({ ...acc, [cur]: true }), {});
    const initialValues = { ..._initialValues, ...submittedValues };
    const validate = (values) => {
        const formattedValues = completion.formatFields(values);
        const r = {
            ...completion.validateFields(values, formattedValues),
            ...(_validate ? _validate(formattedValues) : {}),
        };
        return r;
    };
    const submit = (values) => {
        const formattedValues = completion.formatFields(values);
        const actionUrl = route_utils_1.urlParse(_action);
        const url = (method === 'get'
            ? actionUrl.set('query', { ...actionUrl.query, ...formattedValues })
            : actionUrl);
        const state = (method === 'post'
            ? formattedValues
            : undefined);
        if ((location.pathname !== actionUrl.pathname && actionUrl.pathname !== '') ||
            !es6_1.default(location.query, actionUrl.query) ||
            !es6_1.default(location.state, state)) {
            history.push(url.toString(), state);
        }
    };
    const onSubmit = (values, actions) => {
        actions.setSubmitting(false);
        submit(values);
    };
    const formikForm = react_1.createElement(formik_form_1.default, {
        ...attrs,
        action: location.pathname,
        className: classes(),
        children,
        initialErrors,
        initialTouched,
        initialValues,
        method,
        onSubmit,
        validate
    });
    const graph = new graph_1.Graph();
    const register = new registry_1.Register(graph);
    register.openRegistration();
    server_1.renderToStaticMarkup(react_1.createElement(react_router_1.StaticRouter, {}, react_1.createElement(registry_1.Registry, {
        children: formikForm,
        value: register
    })));
    register.closeRegistration();
    const completion = new completion_1.Completion(graph);
    completion.initialise(initialValues, initialTouched);
    Object.assign(initialErrors, validate(initialValues));
    completion.update(initialValues, initialErrors);
    if ((Object.keys(submittedValues).length > 0) &&
        (Object.keys(initialErrors).length === 0)) {
        submit(submittedValues);
    }
    return react_1.createElement(completion_1.CompletionContext.Provider, {
        children: formikForm,
        value: completion
    });
};
exports.default = exports.Form;
