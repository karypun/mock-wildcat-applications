import { Graph } from './graph';
import { Node } from './node';
import { PathItem } from './path';
export declare class ForkItem implements PathItem {
    tag: string;
    active: boolean;
    constructor(active: boolean);
}
declare type Condition = (v: object) => boolean;
export declare class ForkNode extends Node {
    readonly tag: string;
    condition: Condition;
    left: Graph;
    right: Graph;
    active: boolean;
    constructor(condition: Condition, left: Graph, right: Graph);
    toPathItem(): PathItem;
    depopulate(): void;
    populateFromValues(values: any): void;
    populateFromNext(next: any): void;
    toArray(): Node[];
    traverse(values: any): Graph;
}
export declare const isForkNode: (v: any) => v is ForkNode;
export declare const isForkItem: (v: any) => v is ForkItem;
export {};
