import { Node } from './node';
import { PathItem } from './path';
export declare type FormatFn = (v: any) => string;
export declare type PreValidateFn = (v: any) => object;
export declare type ValidateFn = (v: any) => string;
export declare class FieldItem implements PathItem {
    tag: string;
    active: boolean;
    readonly name: string;
    constructor(active: boolean, name: string);
}
export declare class FieldNode extends Node {
    readonly tag: string;
    readonly name: string;
    readonly preValidate: PreValidateFn;
    readonly validate: ValidateFn;
    readonly format: FormatFn;
    hasFocus: boolean;
    constructor(name: string, format: FormatFn, validate: ValidateFn, preValidate: PreValidateFn);
    toPathItem(): FieldItem;
    depopulate(): void;
    populateFromValues(values: any): void;
    populateFromNext(next: any): void;
    toArray(): Node[];
    traverse(values: any): Node[];
}
export declare const isFieldNode: (v: any) => v is FieldNode;
export declare const isFieldItem: (v: any) => v is FieldItem;
