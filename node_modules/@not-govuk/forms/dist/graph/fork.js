"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isForkItem = exports.isForkNode = exports.ForkNode = exports.ForkItem = void 0;
const graph_1 = require("./graph");
const node_1 = require("./node");
class ForkItem {
    constructor(active) {
        this.tag = 'fork';
        this.active = active;
    }
}
exports.ForkItem = ForkItem;
class ForkNode extends node_1.Node {
    constructor(condition, left, right) {
        super('fork');
        this.condition = condition;
        this.left = left;
        this.right = right;
        this.active = false;
    }
    toPathItem() {
        return new ForkItem(this.active);
    }
    ;
    depopulate() {
        this.active = false;
    }
    populateFromValues(values) {
        this.active = this.condition(values);
    }
    populateFromNext(next) {
    }
    toArray() {
        return [
            this,
            ...this.left.toArray(),
            ...this.right.toArray()
        ];
    }
    traverse(values) {
        return (this.active
            ? new graph_1.Graph(this, ...this.left.flatMap(e => e.traverse(values)))
            : new graph_1.Graph(this, ...this.right.flatMap(e => e.traverse(values))));
    }
}
exports.ForkNode = ForkNode;
exports.isForkNode = (v) => v instanceof ForkNode;
exports.isForkItem = (v) => v instanceof ForkItem;
