"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withForm = exports.withControl = exports.withField = void 0;
const react_1 = require("react");
const formik_1 = require("formik");
const formik_2 = require("formik");
const graph_1 = require("./graph");
const context_1 = require("./context");
const helpers_1 = require("./helpers");
const toString = (v) => ((v === undefined || v === null)
    ? ''
    : String(v));
exports.withField = (Component, implicitValidators, preValidators) => props => {
    const validators = [
        ...(props.validators || []),
        ...(implicitValidators || [])
    ];
    validators.sort((l, r) => r.priority - l.priority);
    const preValidate = preValidators && (v => {
        const r = {};
        Object.keys(preValidators)
            .map(k => {
            const error = preValidators[k]
                .map(f => f({ name: k })(v && toString(v[k])))
                .filter(helpers_1.id)[0];
            if (error) {
                r[k] = error;
            }
            return true;
        });
        return Object.keys(r).length ? r : undefined;
    });
    const validate = validators && (v => validators
        .map(f => f({ name: props.name, prettyName: props.prettyName })(toString(v)))
        .filter(helpers_1.id)[0]);
    const [field, meta] = formik_1.useField(props.name);
    const form = context_1.useForm();
    const node = new graph_1.FieldNode(props.name, Component.format, validate, preValidate);
    form.registry.register(node);
    const state = form.completion.pop();
    return react_1.createElement(Component, {
        ...field,
        ...props,
        error: meta.error && meta.touched && meta.error,
        value: field.value === null ? '' : field.value
    });
};
exports.withControl = (Component) => props => {
    const { isSubmitting } = formik_2.useFormikContext();
    const disabled = isSubmitting || props.disabled;
    return react_1.createElement(Component, {
        ...props,
        disabled: disabled
    });
};
exports.withForm = (Component, implicitValidators, preValidators) => (exports.withControl(exports.withField(Component, implicitValidators, preValidators)));
