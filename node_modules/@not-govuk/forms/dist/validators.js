"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.postalCode = exports.mobileNumber = exports.email = exports.url = exports.after = exports.before = exports.future = exports.past = exports.date = exports.range = exports.minimum = exports.maximum = exports.integer = exports.numeric = exports.alphanumeric = exports.alpha = exports.minWords = exports.maxWords = exports.exactLength = exports.minLength = exports.maxLength = exports.required = exports.validator = void 0;
const validator_1 = require("validator");
;
const capitalise = (s) => s.charAt(0).toUpperCase() + s.slice(1);
const prettyName = (field) => field.prettyName || field.name.replace(/[-_]/g, ' ');
const PrettyName = (field) => capitalise(prettyName(field));
const a = (field) => {
    const isVowel = (s) => /[aeiouh]/i.test(s);
    const thing = prettyName(field);
    const firstChar = thing.charAt(0);
    const a = isVowel(firstChar) ? 'an' : 'a';
    return `${a} ${thing}`;
};
const words = (s) => s
    .replace(/\s+/g, ' ')
    .trim()
    .split(' ');
const wordCount = (s) => words(s).length;
const readyValidator = (f, priority = 0) => Object.assign(f, { priority: priority });
const rawValidator = (customMsg, isValid, defaultMsg) => (isValid
    ? undefined
    : (customMsg || defaultMsg));
exports.validator = (customMsg, value, isValid, defaultMsg) => rawValidator(customMsg, !value || isValid, defaultMsg);
exports.required = (msg) => readyValidator((field) => (value) => rawValidator(msg, value, `Enter ${a(field)}`), 100);
exports.maxLength = (max) => (msg) => readyValidator((field) => (value) => exports.validator(msg, value, value && value.length <= max, `Enter ${a(field)} of no more than ${max} characters`), 20);
exports.minLength = (min) => (msg) => readyValidator((field) => (value) => exports.validator(msg, value, value && value.length >= min, `Enter ${a(field)} of no less than ${min} characters`), 20);
exports.exactLength = (length) => (msg) => readyValidator((field) => (value) => exports.validator(msg, value, value && value.length === length, `Enter ${a(field)} of ${length} characters`), 10);
exports.maxWords = (max) => (msg) => readyValidator((field) => (value) => exports.validator(msg, value, value && wordCount(value) <= max, `Enter ${a(field)} of no more than ${max} words`), 20);
exports.minWords = (min) => (msg) => readyValidator((field) => (value) => exports.validator(msg, value, value && wordCount(value) >= min, `Enter ${a(field)} of no less than ${min} words`), 20);
exports.alpha = (locale) => (msg) => readyValidator((field) => (value) => exports.validator(msg, value, value && validator_1.isAlpha(value, locale), `${PrettyName(field)} must only contain letters`), 20);
exports.alphanumeric = (locale) => (msg) => readyValidator((field) => (value) => exports.validator(msg, value, value && validator_1.isAlphanumeric(value, locale), `${PrettyName(field)} must only contain letters and/or numbers`), 30);
exports.numeric = (msg) => readyValidator((field) => (value) => exports.validator(msg, value, value && validator_1.isNumeric(value), `${PrettyName(field)} must only contain numbers`), 20);
exports.integer = (msg) => readyValidator((field) => (value) => exports.validator(msg, value, value && validator_1.isInt(value), `${PrettyName(field)} must be a number`), 10);
exports.maximum = (max) => (msg) => readyValidator((field) => (value) => exports.validator(msg, value, value && validator_1.isInt(value, { max: max }), `${PrettyName(field)} must be no greater than ${max}`), 10);
exports.minimum = (min) => (msg) => readyValidator((field) => (value) => exports.validator(msg, value, value && validator_1.isInt(value, { min: min }), `${PrettyName(field)} must be no less than ${min}`), 10);
exports.range = (min, max) => (msg) => readyValidator((field) => (value) => exports.validator(msg, value, value && validator_1.isInt(value, { min: min, max: max }), `${PrettyName(field)} must be between ${min} and ${max}`), 10);
exports.date = (msg) => readyValidator((field) => (value) => exports.validator(msg, value, value && validator_1.isISO8601(value, { strict: true }), `Enter a real ${prettyName(field)}`), 50);
exports.past = (msg) => readyValidator((field) => (value) => exports.validator(msg, value, value && validator_1.isBefore(value), `${PrettyName(field)} must be in the past`), 30);
exports.future = (msg) => readyValidator((field) => (value) => exports.validator(msg, value, value && validator_1.isAfter(value), `${PrettyName(field)} must be in the future`), 30);
exports.before = (date) => (msg) => readyValidator((field) => (value) => exports.validator(msg, value, value && validator_1.isBefore(value, date), `${PrettyName(field)} must be before ${date}`), 20);
exports.after = (date) => (msg) => readyValidator((field) => (value) => exports.validator(msg, value, value && validator_1.isAfter(value, date), `${PrettyName(field)} must be after ${date}`), 20);
exports.url = (msg) => readyValidator((field) => (value) => exports.validator(msg, value, value && validator_1.isURL(value), `Enter a real URL`), 10);
exports.email = (msg) => readyValidator((field) => (value) => exports.validator(msg, value, value && validator_1.isEmail(value), `Enter a real e-mail address`), 10);
exports.mobileNumber = (locale) => (msg) => readyValidator((field) => (value) => exports.validator(msg, value, value && validator_1.isMobilePhone(value, locale), `Enter a real mobile phone number`), 10);
exports.postalCode = (locale) => (msg) => readyValidator((field) => (value) => exports.validator(msg, value, value && validator_1.isPostalCode(value, locale), `Enter a real postal code`), 10);
