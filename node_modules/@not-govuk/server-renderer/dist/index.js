"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reactRenderer = void 0;
const react_1 = require("react");
const server_1 = require("react-dom/server");
const js_beautify_1 = require("js-beautify");
const app_composer_1 = require("@not-govuk/app-composer");
const html_envelope_1 = require("./html-envelope");
const statusToTitle = {
    400: 'Bad request',
    401: 'Unauthorised',
    402: 'Payment required',
    403: 'Forbidden',
    404: 'Page not found',
    405: 'Method not allowed',
    406: 'Not acceptable',
    407: 'Proxy authentication required',
    408: 'Request timeout',
    409: 'Conflict',
    410: 'Gone',
    418: 'I am a teapot',
    500: 'Internal server error',
    501: 'Not implemented',
    502: 'Bad gateway',
    503: 'Service unavailable',
    504: 'Gateway timeout',
    505: 'HTTP version not supported',
};
const contentTypeToCharSet = (contentType) => {
    const matches = contentType.match(/charset=([^;]*)/);
    return (matches && matches[1]
        ? matches[1]
        : undefined);
};
exports.reactRenderer = ({ AppWrap, ErrorPage, PageWrap, assetsPath, entrypoints, graphQL, pages, rootId, signInHRef, signOutHRef, ssrOnly }) => {
    const createApp = (req, res, body, charSet) => {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const data = {};
        const user = {
            displayName: (_a = req.auth) === null || _a === void 0 ? void 0 : _a.displayName,
            emails: (_b = req.auth) === null || _b === void 0 ? void 0 : _b.emails,
            groups: (_c = req.auth) === null || _c === void 0 ? void 0 : _c.groups,
            name: (_d = req.auth) === null || _d === void 0 ? void 0 : _d.name,
            photos: (_e = req.auth) === null || _e === void 0 ? void 0 : _e.photos,
            roles: (_f = req.auth) === null || _f === void 0 ? void 0 : _f.roles,
            username: (_g = req.auth) === null || _g === void 0 ? void 0 : _g.username
        };
        const routerProps = {
            location: req.url,
            context: {
                statusCode: res.statusCode
            }
        };
        const err = (body instanceof Error
            ? {
                statusCode: res.statusCode,
                title: statusToTitle[res.statusCode] || 'Error',
                message: body.message
            }
            : undefined);
        const reqProps = {
            err,
            pageTitle: (err && err.title) || (body === null || body === void 0 ? void 0 : body.toString())
        };
        const appProps = {
            pages,
            signInHRef,
            signOutHRef,
            ...reqProps
        };
        const App = app_composer_1.compose({
            AppWrap,
            ErrorPage,
            PageWrap,
            graphQL: graphQL && {
                schema: graphQL.schema
            },
            routerProps,
            data,
            user: { ...user, accessToken: (_h = req.auth) === null || _h === void 0 ? void 0 : _h.accessToken }
        });
        const app = react_1.createElement(App, appProps);
        const render = () => app_composer_1.renderToStringWithData(app);
        const renderToHtml = (appRender) => {
            var _a, _b, _c, _d;
            appRender = appRender || server_1.renderToString(app);
            const assetsByChunkName = ((_b = (_a = res === null || res === void 0 ? void 0 : res.locals) === null || _a === void 0 ? void 0 : _a.webpack) === null || _b === void 0 ? void 0 : _b.devMiddleware.stats.toJson().assetsByChunkName) || ((_d = (_c = res === null || res === void 0 ? void 0 : res.locals) === null || _c === void 0 ? void 0 : _c.webpackStats) === null || _d === void 0 ? void 0 : _d.toJson().assetsByChunkName) ||
                entrypoints;
            const assets = (Object.values(assetsByChunkName)
                .flat()
                .map(v => String(v)));
            const env = html_envelope_1.htmlEnvelope({
                assetsPath,
                charSet,
                helmet: App.helmetContext.helmet,
                hydrationData: (ssrOnly
                    ? undefined
                    : {
                        props: appProps,
                        cache: App.extractDataCache(),
                        user
                    }),
                rootId,
                scripts: (ssrOnly
                    ? undefined
                    : assets.filter(v => v.endsWith('.js'))),
                stylesheets: assets.filter(v => v.endsWith('.css'))
            });
            const html = env.head + appRender + env.foot;
            return js_beautify_1.html(html, {
                'indent_with_tabs': true
            });
        };
        return {
            render,
            renderToHtml
        };
    };
    const formatHTML = (req, res, body) => {
        if (!res.html) {
            const app = createApp(req, res, body, contentTypeToCharSet(res.header('Content-Type')));
            res.html = app.renderToHtml();
        }
        res.setHeader('Content-Length', Buffer.byteLength(res.html));
        return res.html;
    };
    const renderApp = (req) => function (code, body, headers) {
        const res = this;
        const charSet = 'UTF-8';
        if (typeof code !== 'number') {
            headers = body;
            body = code;
            code = 200;
        }
        res.statusCode = code;
        res.charSet(charSet);
        res.contentType = 'text/html';
        const app = createApp(req, res, body, charSet);
        const promise = (graphQL
            ? app.render()
            : Promise.resolve(''));
        return promise.then(renderedApp => {
            res.html = app.renderToHtml(renderedApp);
            res.send(code, body || true, headers);
        });
    };
    const renderer = (req, res, next) => {
        res.renderApp = renderApp(req);
        next();
    };
    return {
        formatHTML,
        renderer
    };
};
exports.default = exports.reactRenderer;
