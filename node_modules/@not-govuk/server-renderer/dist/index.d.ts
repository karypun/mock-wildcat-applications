import { GraphQLSchema } from 'graphql';
import { ComponentType } from 'react';
import { Next, Request as _Request, Response as _Response } from 'restify';
import { ApplicationProps, ErrorPageProps, PageProps, PageInfoSSR } from '@not-govuk/app-composer';
declare type Request = _Request & {
    auth?: any;
};
declare type RenderApp = (code?: any, body?: any, headers?: any) => Promise<void>;
export declare type Response = _Response & {
    html?: string;
    locals?: any;
    renderApp?: RenderApp;
};
declare type Body = string | Error;
export declare type RendererOptions = {
    AppWrap: ComponentType<ApplicationProps>;
    ErrorPage: ComponentType<ErrorPageProps>;
    PageWrap: ComponentType<PageProps>;
    assetsPath: string;
    entrypoints?: object;
    graphQL?: {
        schema: GraphQLSchema;
    };
    pages: PageInfoSSR[];
    rootId: string;
    signInHRef?: string;
    signOutHRef?: string;
    ssrOnly: boolean;
};
declare type Format = (req: Request, res: Response, body?: Body) => string;
declare type Renderer = (req: Request, res: Response, next: Next) => void;
export declare type RestifyRenderer = {
    formatHTML: Format;
    renderer: Renderer;
};
export declare type ReactRenderer = (options: RendererOptions) => RestifyRenderer;
export declare const reactRenderer: ReactRenderer;
export default reactRenderer;
export type { Application, ApplicationProps, ErrorPage, ErrorPageProps, Page, PageProps } from '@not-govuk/app-composer';
