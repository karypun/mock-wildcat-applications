import { createElement as h, useRef, useState } from 'react';
import { classBuilder } from '@not-govuk/component-helpers';
import { useIsMounted } from '@not-govuk/route-utils';
import '../assets/Tabs.scss';
export const Tabs = ({ children, classBlock, classModifiers, className, items, title = 'Contents', ...attrs }) => {
    const classes = classBuilder('govuk-tabs', classBlock, classModifiers, className);
    const initial = 0;
    const [selected, setSelected] = useState(initial);
    const refs = items.map(() => useRef(null));
    const select = (i) => (e) => {
        e.preventDefault();
        i !== selected && setSelected(i);
    };
    const keydown = (e) => {
        var _a;
        switch (e.keyCode) {
            case 37:
            case 38:
                e.preventDefault();
                if (selected > 0) {
                    const i = selected - 1;
                    setSelected(i);
                    refs[i].current.focus();
                }
                break;
            case 39:
            case 40:
                e.preventDefault();
                if (selected < items.length - 1) {
                    const i = selected + 1;
                    setSelected(i);
                    (_a = refs[i]) === null || _a === void 0 ? void 0 : _a.current.focus();
                }
                break;
        }
    };
    const ssr = !useIsMounted();
    return (h("div", Object.assign({}, attrs, { className: classes() }),
        h("h2", { className: classes('title') }, title),
        h("ul", { className: classes('list'), role: "tablist" }, items.map(({ id, label }, i) => (h("li", { key: i, className: classes('list-item', i === selected ? 'selected' : undefined), onClick: select(i), role: "presentation" },
            h("a", { "aria-controls": id, "aria-selected": i === selected ? 'true' : 'false', className: classes('tab'), href: `#${id}`, id: `tab_${id}`, onKeyDown: keydown, ref: refs[i], role: "tab", tabIndex: ssr ? undefined : (i === selected ? 0 : -1) }, label))))),
        items.map(({ content, id, label, ...attrs2 }, i) => (h("div", Object.assign({ key: i }, attrs2, { "aria-labelledby": `tab_${id}`, className: classes('panel', ssr || i === selected ? undefined : 'hidden'), id: id, role: "tabpanel" }), content)))));
};
export default Tabs;
