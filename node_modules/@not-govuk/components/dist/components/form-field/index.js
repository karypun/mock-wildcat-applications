import Checkboxes from './checkboxes';
import DateInput from './date-input';
import Input from './input';
import Radios from './radios';
import Select from './select';
import Textarea from './textarea';
import { className } from '../../helpers';
;
;
export const isArray = (v) => v instanceof Array;
export const FormField = props => {
    let inferredType;
    if (props.options) {
        if (props.options.length < 8) {
            inferredType = props.multiple ? 'checkboxes' : 'radios';
        }
        else {
            inferredType = 'select';
        }
    }
    else if (props.rows) {
        inferredType = 'textarea';
    }
    else {
        inferredType = 'text';
    }
    const type = props.type || inferredType;
    const selected = (option) => (isArray(props.defaultValue)
        ? {
            ...option,
            selected: props.defaultValue.includes(option.value)
        } : option);
    const processedProps = {
        ...props,
        className: className(props.error && 'govuk-form-group--error', props.className),
        defaultValue: props.value === undefined ? props.defaultValue : undefined,
        fieldStyle: props.width && { maxWidth: (((props.width >= 10) ? 4.76 : 1.76) + 1.81 * props.width) + 'ex' },
        id: props.id || props.name,
        inline: (props.inline === null && (type === 'radios' && props.options && props.options.length <= 2)) || props.inline,
        options: (props.options && props.value === undefined
            ? props.options.map(selected)
            : props.options),
        rows: (props.rows === null && (type === 'textarea' && 5)) || props.rows,
        small: (props.small === null && (props.options && props.options.length >= 6)) || props.small,
        spellcheck: props.spellCheck !== null ? (props.spellCheck ? 'true' : 'false') :
            type === 'textarea' ? 'true' :
                undefined,
        type: type === 'native-date' ? 'date' : type,
        value: props.value
    };
    return (type === 'checkboxes' ? Checkboxes(processedProps) :
        type === 'date' ? DateInput(processedProps) :
            type === 'radios' ? Radios(processedProps) :
                type === 'select' ? Select(processedProps) :
                    type === 'textarea' ? Textarea(processedProps) :
                        Input(processedProps));
};
FormField.defaultProps = {
    autoComplete: null,
    className: null,
    defaultValue: undefined,
    disabled: false,
    error: null,
    hint: null,
    id: null,
    inline: null,
    multiple: null,
    onBlur: null,
    onChange: null,
    options: null,
    rows: null,
    small: null,
    spellCheck: null,
    value: undefined,
    width: null
};
export default FormField;
