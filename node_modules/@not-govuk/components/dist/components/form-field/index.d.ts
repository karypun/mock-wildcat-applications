import * as React from 'react';
import { IDateInputValue, IDateInputPreValidateError } from '../date-input';
export interface IOption {
    disabled?: boolean;
    hint?: string;
    label: string;
    selected?: boolean;
    value: string;
}
export declare type SelectValue = string | string[];
declare type Value = SelectValue | IDateInputValue;
declare type FormFieldError = string | IDateInputPreValidateError;
export interface IFormField {
    /** Identifier for auto-completion */
    autoComplete?: string;
    /** Extra CSS classes to be applied */
    className?: string;
    /** Initial value of the field */
    defaultValue?: Value;
    /** Whether the field should be disabled */
    disabled?: boolean;
    /** Error message */
    error?: FormFieldError;
    /** Hint */
    hint?: string;
    /** HTML id (If not specified then the name will be used) */
    id?: string;
    /** Whether checkboxes and radios should be displayed on a single line on wide displays (inferred from number of options if not provided)*/
    inline?: boolean;
    /** Label */
    label: any;
    /** Whether multiple options can be selected */
    multiple?: boolean;
    /** HTML name */
    name: string;
    /** onBlur callback (for controlled fields) */
    onBlur?: (e: React.FocusEvent<any>) => void;
    /** onChange callback (for controlled fields) */
    onChange?: (e: React.ChangeEvent<any>) => void;
    /** List of options to select from */
    options?: Array<IOption>;
    /** Initial number of lines of input on a textarea or the size of a multi-select */
    rows?: number;
    /** Whether checkboxes and radios should be small (inferred from number of options if not provided) */
    small?: boolean;
    /** Whether the browser should spellcheck the input */
    spellCheck?: boolean;
    /** Type of field (inferred if not provided) */
    type?: string;
    /** Value for controlled fields */
    value?: Value;
    /** Width of the field in characters (approximate) (only applies to single input fields) */
    width?: number;
}
export declare const isArray: <T>(v: any) => v is T[];
export declare const FormField: React.SFC<IFormField>;
export default FormField;
