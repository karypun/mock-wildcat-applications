import { ReactNode, SFC } from 'react';
export interface IDateInputValue {
    day: string;
    month: string;
    year: string;
}
export interface IDateInputPreValidateError {
    day?: string;
    month?: string;
    year?: string;
}
declare type DateInputError = string | IDateInputPreValidateError;
export interface IDateInput {
    /** Identifier for auto-completion */
    autoComplete?: string;
    /** Extra CSS classes to be applied */
    className?: string;
    /** Initial value of the field */
    defaultValue?: IDateInputValue;
    /** Whether the field should be disabled */
    disabled?: boolean;
    /** Error message */
    error?: DateInputError;
    /** Hint */
    hint?: string;
    /** HTML id (If not specified then the name will be used) */
    id?: string;
    /** Label */
    label: ReactNode;
    /** HTML name */
    name: string;
    /** onBlur callback (for controlled fields) */
    onBlur?: (e: React.FocusEvent<any>) => void;
    /** onChange callback (for controlled fields) */
    onChange?: (e: React.ChangeEvent<any>) => void;
    /** Value for controlled fields */
    value?: IDateInputValue;
}
interface WithFormat<T> {
    format?: (v: T) => string;
}
interface WithDeformat<T> {
    deformat?: (v: string) => T;
}
export declare type RawField<P, V> = SFC<P> & WithFormat<V> & WithDeformat<V>;
export declare const DateInput: RawField<IDateInput, IDateInputValue>;
export default DateInput;
