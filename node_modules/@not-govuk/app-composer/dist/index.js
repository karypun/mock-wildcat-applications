"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.compose = void 0;
const client_1 = require("@apollo/client");
const schema_1 = require("@apollo/client/link/schema");
const react_1 = require("react");
const react_helmet_async_1 = require("react-helmet-async");
const react_router_1 = require("react-router");
const react_router_dom_1 = require("react-router-dom");
const route_utils_1 = require("@not-govuk/route-utils");
const user_info_1 = require("@not-govuk/user-info");
const htmlPage = (html) => {
    const HTMLPage = (_) => react_1.createElement('div', {
        dangerouslySetInnerHTML: { __html: html }
    });
    return HTMLPage;
};
const stringToComponentMod = v => (typeof v === 'string'
    ? {
        default: htmlPage(v)
    }
    : v);
exports.compose = options => {
    const Router = ("context" in options.routerProps
        ? react_router_1.StaticRouter
        : react_router_dom_1.BrowserRouter);
    const UserInfoProvider = ({ children }) => (options.user
        ? react_1.createElement(user_info_1.UserInfoContext.Provider, {
            value: options.user
        }, children)
        : react_1.createElement(react_1.Fragment, {}, children));
    const SuspenseOrFragment = ("LoadingPage" in options
        ? react_1.Suspense
        : react_1.Fragment);
    const client = (options.graphQL
        ? (new client_1.ApolloClient({
            cache: (options.data
                ? new client_1.InMemoryCache().restore(options.data)
                : new client_1.InMemoryCache()),
            link: (options.graphQL.schema
                ? new schema_1.SchemaLink({
                    schema: options.graphQL.schema,
                    context: { auth: options.user }
                })
                : client_1.createHttpLink(options.graphQL.endpoint))
        }))
        : undefined);
    const DataProvider = ({ children, client = undefined }) => (client
        ? react_1.createElement(client_1.ApolloProvider, {
            client,
            children
        })
        : react_1.createElement(react_1.Fragment, {}, children));
    const extractDataCache = () => client && client.extract();
    const helmetContext = {};
    const App = props => {
        const routes = props
            .pages
            .map(e => {
            const loaded = (e.Component
                ? (typeof e.Component === 'string'
                    ? e.Component
                    : { default: e.Component })
                : options.pageLoader(e.src));
            const loadedComponentMod = (loaded instanceof Promise
                ? loaded.then(stringToComponentMod)
                : stringToComponentMod(loaded));
            const Component = (loadedComponentMod instanceof Promise
                ? react_1.lazy(() => loadedComponentMod)
                : loadedComponentMod.default);
            return {
                Component,
                href: decodeURI(e.href),
                title: e.title
            };
        });
        const pageProps = {
            routes,
            signInHRef: props.signInHRef,
            signOutHRef: props.signOutHRef
        };
        const withPageWrap = Component => props => (react_1.createElement(options.PageWrap, pageProps, react_1.createElement(Component, props)));
        const suspenseProps = ("LoadingPage" in options
            ? { fallback: react_1.createElement(route_utils_1.withRouter(withPageWrap(options.LoadingPage))) }
            : undefined);
        const PageError = withPageWrap(options.ErrorPage);
        const switchOrError = (props.err
            ? react_1.createElement(route_utils_1.withRouter(PageError), {
                internal: String(props.err.statusCode).startsWith('5'),
                title: props.err.title,
                message: props.err.message
            })
            : react_1.createElement(react_router_1.Switch, {}, [
                ...routes.map((v, i) => react_1.createElement(route_utils_1.Route, {
                    component: withPageWrap(v.Component),
                    exact: true,
                    key: i,
                    path: v.href
                })),
                react_1.createElement(route_utils_1.Route, {
                    component: props => react_1.createElement(PageError, {
                        ...props,
                        internal: false,
                        title: 'Page not found',
                        message: `${props.location.pathname} does not exist.`
                    }),
                    key: 'catch-all'
                })
            ]));
        const router = react_1.createElement(Router, options.routerProps, react_1.createElement(UserInfoProvider, {}, react_1.createElement(SuspenseOrFragment, suspenseProps, switchOrError)));
        return react_1.createElement(options.AppWrap, props, react_1.createElement(react_helmet_async_1.HelmetProvider, { context: helmetContext }, react_1.createElement(DataProvider, { client }, router)));
    };
    return Object.assign(App, {
        extractDataCache,
        helmetContext: helmetContext
    });
};
var ssr_1 = require("@apollo/client/react/ssr");
Object.defineProperty(exports, "renderToStringWithData", { enumerable: true, get: function () { return ssr_1.renderToStringWithData; } });
