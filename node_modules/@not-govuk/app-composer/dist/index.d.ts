/// <reference types="webpack-env" />
import { GraphQLSchema } from 'graphql';
import { ComponentType } from 'react';
import { FilledContext } from 'react-helmet-async';
import { StaticRouterProps } from 'react-router';
import { BrowserRouterProps } from 'react-router-dom';
import { RouteComponentProps } from '@not-govuk/route-utils';
import { UserInfo } from '@not-govuk/user-info';
declare type DataCache = object;
export declare type HydrationData = {
    props: ApplicationPropsCSR;
    cache?: DataCache;
    user?: UserInfo;
};
export declare type Hydration = {
    id: string;
    data: HydrationData;
};
export declare type RouteInfo = {
    href: string;
    title: string;
};
export declare type PageInfo = RouteInfo & {
    src: string;
};
declare type SSRComponent = Page | string;
export declare type PageInfoSSR = PageInfo & {
    Component: SSRComponent;
};
declare type ApplicationPropsCommon = {
    err?: ServerError;
    pageTitle: string;
    signInHRef?: string;
    signOutHRef?: string;
};
export declare type ApplicationPropsCSR = ApplicationPropsCommon & {
    pages: PageInfo[];
};
declare type ServerError = {
    statusCode: number;
    title: string;
    message: string;
};
export declare type ApplicationPropsSSR = ApplicationPropsCommon & {
    pages: PageInfoSSR[];
};
export declare type ApplicationProps = ApplicationPropsCSR | ApplicationPropsSSR;
declare type ApplicationCSR = ComponentType<ApplicationPropsCSR>;
declare type ApplicationSSR = ComponentType<ApplicationPropsSSR> & {
    extractDataCache: () => object;
    helmetContext: FilledContext;
};
export declare type Application = ComponentType<ApplicationProps>;
export declare type PageProps = RouteComponentProps & {
    routes: RouteInfo[];
    signInHRef?: string;
    signOutHRef?: string;
};
export declare type Page = ComponentType<PageProps>;
export declare type ErrorPageProps = PageProps & {
    internal: boolean;
    title: string;
    message: string;
};
export declare type ErrorPage = ComponentType<ErrorPageProps>;
export declare type PageModule = string | {
    default: Page;
    title?: string;
};
export declare type PageLoader = __WebpackModuleApi.RequireContext;
declare type ComposeOptionsCommon = {
    AppWrap: Application;
    ErrorPage: ErrorPage;
    PageWrap: Page;
    data?: DataCache;
};
declare type ComposeOptionsSSR = ComposeOptionsCommon & {
    graphQL?: {
        schema: GraphQLSchema;
    };
    routerProps: StaticRouterProps;
    user?: UserInfo & {
        accessToken?: string;
    };
};
declare type ComposeOptionsCSR = ComposeOptionsCommon & {
    LoadingPage: Page;
    graphQL?: {
        endpoint: string;
    };
    pageLoader: PageLoader;
    routerProps: BrowserRouterProps;
    user?: UserInfo;
};
export declare type ComposeOptions = ComposeOptionsCSR | ComposeOptionsSSR;
declare type Compose = {
    (options: ComposeOptionsCSR): ApplicationCSR;
    (options: ComposeOptionsSSR): ApplicationSSR;
};
export declare const compose: Compose;
export { renderToStringWithData } from '@apollo/client/react/ssr';
export type { UserInfo };
