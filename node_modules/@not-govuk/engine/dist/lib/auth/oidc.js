"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.oidcAuth = void 0;
const base64url_1 = __importDefault(require("base64url"));
const openid_client_1 = require("openid-client");
const passport_1 = require("./passport");
const id = (x) => x;
const resourceToRoles = (acc, [x, y]) => {
    var _a;
    return ([
        ...acc,
        ...(((_a = y.roles) === null || _a === void 0 ? void 0 : _a.map(e => `${x}:${e}`)) || [])
    ]);
};
exports.oidcAuth = async ({ clientId, clientSecret, issuer, redirectUri, sessionsSecret }) => {
    const iss = await openid_client_1.Issuer.discover(issuer);
    const client = new iss.Client({
        client_id: clientId,
        client_secret: clientSecret,
        redirect_uris: [redirectUri + '/auth/callback'],
        token_endpoint_auth_method: (clientSecret
            ? 'client_secret_basic'
            : 'none')
    });
    const options = {
        client,
        params: {
            scope: 'openid'
        },
        passReqToCallback: true
    };
    const verify = (_req, tokenset, userinfo, done) => {
        var _a;
        const accessClaims = JSON.parse(base64url_1.default.decode(tokenset.access_token.split('.')[1]));
        const data = {
            ...accessClaims,
            ...tokenset.claims(),
            ...userinfo
        };
        const user = {
            provider: 'oidc',
            id: data.sub,
            displayName: data.displayName || data.name,
            name: {
                familyName: data.familyName || data.family_name,
                givenName: data.givenName || data.given_name,
                middleName: data.middleName || data.middle_name
            },
            emails: (data.emails
                ? [{ value: data.emails }]
                : undefined),
            photos: (data.photo
                ? [{ value: data.photo }]
                : undefined),
            username: data.username || data.preferred_username,
            groups: data.groups,
            roles: [
                ...(data.roles || []),
                ...(((_a = data.realm_access) === null || _a === void 0 ? void 0 : _a.roles) || []),
                ...(Object.entries(data.resource_access || {}).reduce(resourceToRoles, []))
            ].filter(id),
            accessToken: tokenset.access_token
        };
        done(null, user);
    };
    const strategy = new openid_client_1.Strategy(options, verify);
    return passport_1.passportBag({
        callback: true,
        id: 'oidc',
        sessions: true,
        sessionsSecret,
        strategy
    });
};
exports.default = exports.oidcAuth;
