import { Next, Request as _Request, Response, Server } from 'restify';
export declare enum AuthMethod {
    None = "none",
    Dummy = "dummy",
    Headers = "headers",
    OIDC = "oidc"
}
export declare type UserProfile = {
    provider?: string;
    id?: string;
    displayName?: string;
    name?: {
        familyName?: string;
        givenName?: string;
        middleName?: string;
    };
    emails?: Array<{
        value: string;
        type?: string;
    }>;
    photos?: Array<{
        value: string;
    }>;
    username: string;
    groups?: string[];
    roles?: string[];
};
export declare type Request = _Request & {
    auth?: UserProfile;
    logout?: () => void;
};
export declare type Apply = (httpd: Server) => Server;
export declare type Middleware = (req: Request, res: Response, next: Next) => void;
declare type UserExtractor = (req: _Request) => UserProfile;
export declare type AuthBag = {
    apply?: Apply;
    authenticate?: Middleware;
    callback?: Middleware;
    extractor?: UserExtractor;
    terminate?: Middleware;
};
export declare type Promised<T> = T | Promise<T>;
export declare type AuthBagger<T> = (config: T) => Promised<AuthBag>;
export {};
