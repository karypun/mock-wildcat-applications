"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.passportBag = void 0;
const client_sessions_1 = __importDefault(require("client-sessions"));
const passport_1 = __importDefault(require("passport"));
exports.passportBag = ({ callback, id, sessions, sessionsSecret, strategy }) => {
    const serDes = (user, done) => done(null, user);
    passport_1.default.use(id, strategy);
    passport_1.default.serializeUser(serDes);
    passport_1.default.deserializeUser(serDes);
    return {
        apply: (httpd) => {
            if (sessions) {
                httpd.use(client_sessions_1.default({
                    cookieName: 'session',
                    secret: sessionsSecret,
                    cookie: {
                        path: '/',
                        domain: undefined,
                        httpOnly: true,
                        sameSite: 'lax'
                    }
                }));
            }
            httpd.use((req, res, next) => {
                passport_1.default.initialize({ userProperty: 'auth' })(req, res, next);
            });
            if (sessions) {
                httpd.use(passport_1.default.session());
            }
            return httpd;
        },
        authenticate: (req, res, next) => {
            passport_1.default.authenticate(id)(req, res, next);
            next();
        },
        callback: (!callback
            ? undefined
            : ((req, res, next) => {
                const res2 = {
                    ...res,
                    redirect: (uri) => res.redirect(uri, next)
                };
                passport_1.default.authenticate(id, { successRedirect: '/' })(req, res2, next);
                next();
            })),
        terminate: (req, res, next) => {
            req.logout();
            res.redirect(302, '/', next);
        }
    };
};
exports.default = exports.passportBag;
