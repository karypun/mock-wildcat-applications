"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthMethod = exports.auth = exports.isAuthOptionsNone = void 0;
const common_1 = require("./common");
Object.defineProperty(exports, "AuthMethod", { enumerable: true, get: function () { return common_1.AuthMethod; } });
const dummy_1 = require("./dummy");
const headers_1 = require("./headers");
const oidc_1 = require("./oidc");
const noOpMiddleware = (_req, _res, next) => next();
const buildTools = async (options) => {
    const { apply: innerApply, authenticate = noOpMiddleware, callback, extractor, terminate } = await options;
    const apply = (httpd) => {
        if (innerApply) {
            innerApply(httpd);
        }
        else if (extractor) {
            const userInfo = (req, _res, next) => {
                req.auth = extractor(req);
                next();
            };
            httpd.use(userInfo);
        }
        if (authenticate) {
            httpd.get('/auth/sign-in', authenticate);
            httpd.post('/auth/sign-in', authenticate);
            if (callback) {
                httpd.get('/auth/callback', callback);
                httpd.post('/auth/callback', callback);
            }
            if (terminate) {
                httpd.get('/auth/sign-out', terminate);
            }
        }
        return httpd;
    };
    return {
        apply,
        authenticate
    };
};
exports.isAuthOptionsNone = (v) => v.method === common_1.AuthMethod.None;
const isAuthOptionsDummy = (v) => v.method === common_1.AuthMethod.Dummy;
const isAuthOptionsHeaders = (v) => v.method === common_1.AuthMethod.Headers;
const isAuthOptionsOIDC = (v) => v.method === common_1.AuthMethod.OIDC;
const noAuth = { method: common_1.AuthMethod.None };
exports.auth = async (options = noAuth) => buildTools(isAuthOptionsDummy(options) ? dummy_1.dummyAuth(options)
    : isAuthOptionsHeaders(options) ? headers_1.headersAuth(options)
        : isAuthOptionsOIDC(options) ? oidc_1.oidcAuth(options)
            : {});
exports.default = exports.auth;
