import { GraphQLSchema } from 'graphql';
import { ComponentType } from 'react';
import { Configuration as WebpackConfig } from 'webpack';
import { Router } from '@not-govuk/restify';
import { PageLoader } from '@not-govuk/app-composer';
import { ApplicationProps, ErrorPageProps, PageProps } from '@not-govuk/server-renderer';
import { AuthMethod, AuthOptions } from './lib/auth';
export declare type Api = {
    path: string;
    router: Router;
};
export declare enum Mode {
    Server = "server",
    Serverless = "serverless",
    StaticGenerator = "static-generator"
}
export declare enum NodeEnv {
    Development = "development",
    Production = "production"
}
declare type PreBuiltAssets = {
    entrypoints: object;
    localPath: string;
    publicPath: string;
};
export declare type Assets = PreBuiltAssets | WebpackConfig;
export declare type EngineStage1Options = {
    assets: Assets;
    env: NodeEnv;
    httpd: {
        host: string;
        port: number;
    };
    mode: Mode;
    name: string;
    ssrOnly: boolean;
};
export declare type EngineStage2Options = {
    AppWrap: ComponentType<ApplicationProps>;
    ErrorPage: ComponentType<ErrorPageProps>;
    PageWrap: ComponentType<PageProps>;
    apis?: Api[];
    auth?: AuthOptions;
    graphQL?: {
        schema: GraphQLSchema;
    };
    pageLoader: PageLoader;
};
export declare const engine: (options1: EngineStage1Options) => Promise<((options2: EngineStage2Options) => Promise<any>) & {
    proxy: any;
}>;
export default engine;
export { AuthMethod };
export { Router, errors } from '@not-govuk/restify';
